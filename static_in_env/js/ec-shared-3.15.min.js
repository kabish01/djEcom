/*! 
 * ec-shared v3.15
 * https://dev.esewa.com.np
 * Copyright (c) 2019 eSewa Developers <developers@esewa.com.np>
 * License: eSewa
+; * Version: 3.15
+; */
(function (jQuery, window, angular, undefined) { 'use strict';/**
 * Created by Rajim Ali Miya on 4/18/16.
 */
/**
 * uiBreadcrumbs automatic breadcrumbs directive for AngularJS & Angular ui-router.
 *
 * https://github.com/michaelbromley/angularUtils/tree/master/src/directives/uiBreadcrumbs
 *
 * Copyright 2014 Michael Bromley <michael@michaelbromley.co.uk>
 */
    
    
(function() {

    /**
     * Config
     */
    var moduleName = 'angularUtils.directives.uiBreadcrumbs';
    var templateUrl = 'directives/uiBreadcrumbs/uiBreadcrumbs.tpl.html';

    /**
     * Module
     */
    var module;
    try {
        module = angular.module(moduleName);
    } catch(err) {
        // named module does not exist, so create one
        module = angular.module(moduleName, ['ui.router']);
    }

    module.directive('uiBreadcrumbs', ['$interpolate', '$state','$rootScope', function($interpolate, $state, $rootScope) {
        return {
            restrict: 'E',
            templateUrl: function(elem, attrs) {
                return attrs.templateUrl || templateUrl;
            },
            scope: {
                displaynameProperty: '@',
                abstractProxyProperty: '@?'
            },
            link: function(scope) {
                scope.breadcrumbs = [];
                if ($state.$current.name !== '') {
                    updateBreadcrumbsArray();
                }
                scope.$on('$stateChangeSuccess', function() {
                    updateBreadcrumbsArray();
                });

                /**
                 * Start with the current state and traverse up the path to build the
                 * array of breadcrumbs that can be used in an ng-repeat in the template.
                 */
                function updateBreadcrumbsArray() {
                    var workingState;
                    var displayName;
                    var breadcrumbs = [];
                    var currentState = $state.$current;

                    while(currentState && currentState.name !== '') {
                        workingState = getWorkingState(currentState);
                        if (workingState) {
                            displayName = getDisplayName(workingState);

                            if (displayName !== false && !stateAlreadyInBreadcrumbs(workingState, breadcrumbs)) {
                                breadcrumbs.push({
                                    displayName: displayName,
                                    route: workingState.name
                                });
                            }
                        }
                        currentState = currentState.parent;
                    }
                    breadcrumbs.reverse();
                    scope.breadcrumbs = breadcrumbs;
                }

                /**
                 * Get the state to put in the breadcrumbs array, taking into account that if the current state is abstract,
                 * we need to either substitute it with the state named in the `scope.abstractProxyProperty` property, or
                 * set it to `false` which means this breadcrumb level will be skipped entirely.
                 * @param currentState
                 * @returns {*}
                 */
                function getWorkingState(currentState) {
                    var proxyStateName;
                    var workingState = currentState;
                    if (currentState.abstract === true) {
                        if (typeof scope.abstractProxyProperty !== 'undefined') {
                            proxyStateName = getObjectValue(scope.abstractProxyProperty, currentState);
                            if (proxyStateName) {
                                workingState = $state.get(proxyStateName);
                            } else {
                                workingState = false;
                            }
                        } else {
                            workingState = false;
                        }
                    }
                    return workingState;
                }

                /**
                 * Resolve the displayName of the specified state. Take the property specified by the `displayname-property`
                 * attribute and look up the corresponding property on the state's config object. The specified string can be interpolated against any resolved
                 * properties on the state config object, by using the usual {{ }} syntax.
                 * @param currentState
                 * @returns {*}
                 */
                function getDisplayName(currentState) {
                    var interpolationContext;
                    var propertyReference;
                    var displayName;

                    if (!scope.displaynameProperty) {
                        // if the displayname-property attribute was not specified, default to the state's name
                        return currentState.name;
                    }
                    propertyReference = getObjectValue(scope.displaynameProperty, currentState);

                    if (propertyReference === false) {
                        return false;
                    } else if (typeof propertyReference === 'undefined') {
                        return currentState.name;
                    } else {
                        // use the $interpolate service to handle any bindings in the propertyReference string.
                        interpolationContext =  (typeof currentState.locals !== 'undefined') ? currentState.locals.globals : currentState;
                        displayName = $interpolate(propertyReference)(interpolationContext);
                        return displayName;
                    }
                }

                /**
                 * Given a string of the type 'object.property.property', traverse the given context (eg the current $state object) and return the
                 * value found at that path.
                 *
                 * @param objectPath
                 * @param context
                 * @returns {*}
                 */
                function getObjectValue(objectPath, context) {
                    var i;
                    var propertyArray = objectPath.split('.');
                    var propertyReference = context;

                    for (i = 0; i < propertyArray.length; i ++) {
                        if (angular.isDefined(propertyReference[propertyArray[i]])) {
                            propertyReference = propertyReference[propertyArray[i]];
                        } else {
                            // if the specified property was not found, default to the state's name
                            return undefined;
                        }
                    }
                    return propertyReference;
                }

                /**
                 * Check whether the current `state` has already appeared in the current breadcrumbs array. This check is necessary
                 * when using abstract states that might specify a proxy that is already there in the breadcrumbs.
                 * @param state
                 * @param breadcrumbs
                 * @returns {boolean}
                 */
                function stateAlreadyInBreadcrumbs(state, breadcrumbs) {
                    var i;
                    var alreadyUsed = false;
                    for(i = 0; i < breadcrumbs.length; i++) {
                        if (breadcrumbs[i].route === state.name) {
                            alreadyUsed = true;
                        }
                    }
                    return alreadyUsed;
                }
            }
        };
    }]);
})();
angular
    .module('esewaSharedApp', [
        'restangular',
        'ui.bootstrap',
        'ngStorage',
        'esewaMessages'

    ])

    .run(['$rootScope', '$state', '$localStorage', '$http',
        '$timeout', '$sce', '$location', 'StateConstant', 'CDNUrl', 'Restangular', 'ecmsg',
        function ($rootScope, $state, $localStorage, $http,
                  $timeout, $sce, $location, StateConstant, CDNUrl, Restangular, ecmsg) {


            $http.get(CDNUrl.url + '/data/makePaymentUrls.json').then(
                function (res) {
                    $rootScope.makePaymentUrls = res.data;
                }
            );

            function handleMiniLoadingBar(elementId, showloadingBar) {
                var selectedElement = angular.element(document.querySelector('#' + elementId));
                if (showloadingBar && selectedElement) {
                    angular.element(document.querySelector('#' + elementId)).addClass('ec-mini-loading-bar');
                } else {
                    angular.element(document.querySelector('#' + elementId + '.ec-mini-loading-bar')).removeClass('ec-mini-loading-bar');
                }
            }

            var miniLoadingBarconfig = {};
            Restangular.setFullRequestInterceptor(function (element, operation, route, url, headers, params, httpConfig) {
                if (httpConfig.miniLoadingBarId) {
                    miniLoadingBarconfig[route] = {};
                    miniLoadingBarconfig[route].miniLoadingBarId = httpConfig.miniLoadingBarId;
                    miniLoadingBarconfig[route].route = route;
                    delete httpConfig.miniLoadingBarId;
                    handleMiniLoadingBar(miniLoadingBarconfig[route].miniLoadingBarId, true);

                } else {
                    $rootScope.showLoadingBar = true;
                }

            });

            Restangular.addResponseInterceptor(function (data, operation, route, url, response, deferred) {
                $rootScope.showLoadingBar = false;
                $rootScope.disableSubmit = false;
                if (miniLoadingBarconfig.hasOwnProperty(route)) {
                    handleMiniLoadingBar(miniLoadingBarconfig[route].miniLoadingBarId, false);
                    miniLoadingBarconfig = {};
                }
                return data;
            });

            Restangular.setErrorInterceptor(function (response, deferred, responseHandler) {
                $rootScope.showLoadingBar = false;
                $rootScope.disableSubmit = false;
                if (response.status === 403) {
                    var message = _.isObject(response) ? response.data.error_message || response.data.message || response.message : response.message;
                    ecmsg.error(message);
                    $setTimeout(function () {
                        $rootScope.logout();
                    },1000);

                }
                return true;
            });

            $rootScope.StateConstant = StateConstant;
            $rootScope.message = {
                error: '',
                success: '',
                information: '',
                show: false
            };

            $rootScope.$state = $state;
            $rootScope.StateConstant = StateConstant;
            $rootScope.$storage = $localStorage;
            $rootScope.successResponse = {
                message: ''
            };

            $rootScope.showErrorMessage = function () {
                if ($rootScope.message.error !== "" && angular.isDefined($rootScope.message.error)) {
                    return !($state.current.name.startsWith("auth") && $rootScope.isAuthenticated());
                }
                return false;
            };

            $rootScope.isAuthenticated = function () {
                return $rootScope.isLoggedIn();
            };

            $rootScope.getStateConstant = function (fn) {
                $http.get(CDNUrl.url + '/data/propertyConstant.json')
                    .then(function (response) {
                        $rootScope.PropertyConstant = response.data;
                        if (typeof fn === 'function') {
                            fn();
                        }
                    });
            };
            $rootScope.getStateConstant();

            $rootScope.isUser = function () {
                return angular.isDefined($rootScope.$storage.profile.isVerified);
            };

            $rootScope.goToState = function (state, stateparams) {
                var url = '';
                if (!$rootScope.isAuthenticated()) {
                    url = $state.href(state, stateparams, {absolute: false});
                    if (state.indexOf('merchant') > -1) {
                        if (state.indexOf('airlines') > -1) {
                            url = '/#/airlines/search';
                        } else {
                            url = '/#/make_payment/' + stateparams.product_code + '/' + stateparams.product_name;
                        }
                    }
                }
                if ($rootScope.isAuthenticated()) {
                    if (state) {
                        if ($state.current.name === 'organization.make_payment' && state === 'merchant.makePayment.secondStep') {
                            state = 'organization.make_payment.secondStep';
                        }
                        $state.go(state, stateparams);
                    } else {
                        $state.go(StateConstant.HOME_MAIN);
                    }
                } else {
                    $rootScope.openLoginDialog(url);
                }
            };

        }]);

angular.module('esewaSharedApp')
    .config(['ecmsgConfig',function (ecmsgConfig) {
        angular.extend(ecmsgConfig, {
            autoDismiss: false,
            containerId: 'ecmsg-container',
            maxOpened: 0,
            newestOnTop: true,
            positionClass: 'ecmsg-top-center',
            closeButton: true,
            progressBar: true,
            preventOpenDuplicates: true,
            target: 'body'
        });
    }]);

angular.module('esewaSharedApp')
    .config(['RestangularProvider', '$sceDelegateProvider','CDNUrl', function (RestangularProvider, $sceDelegateProvider, CDNUrl) {
        RestangularProvider.setBaseUrl('/api/web');
        $sceDelegateProvider.resourceUrlWhitelist([
            'self',
            CDNUrl.url+'/html/**',
            CDNUrl.url+'/html/*/**',
            'https://nabiltest.compassplus.com:8844/**',
            'https://nabiltest.compassplus.com/**'

        ]);
    }]);




angular.module('esewaSharedApp')
    .config(['$stateProvider', '$urlRouterProvider', 'CDNUrl',
        function ($stateProvider, $urlRouterProvider, CDNUrl) {

            function getCDNUrl(url) {
                return CDNUrl.url + url;
            }

            $urlRouterProvider.otherwise('/home');

            $stateProvider
                .state('download', {
                    url: '/download',
                    templateUrl: (CDNUrl.url + '/html/templates/download_esewa.html')
                })
                .state('allNotification', {
                    url: '/notifictions',
                    templateUrl: 'user/notification/all_notification.html',
                    controller: 'NotificationController'
                })
                .state('faq', {
                    url: '/faq/:faqTopic',
                    templateUrl: getCDNUrl('/html/templates/genericFAQ.html'),
                    controller: 'FAQController'
                })
                .state('serviceList', {
                    url: '/service-list/internet-bill',
                    templateUrl: getCDNUrl('/html/isp_service_list.html'),
                    controller: 'StaticController',
                    data: {
                        displayName: 'Isp Services'
                    }
                });

        }]);

angular.module('esewaSharedApp')
    .config(['$httpProvider','datepickerConfig', function ($httpProvider, datepickerConfig) {

        datepickerConfig.showWeeks = false;

        $httpProvider.interceptors.push(['$rootScope', '$q', 'AUTH_EVENTS', 'CDNUrl', 'ecmsg', '$cookies',
            function ($rootScope, $q, AUTH_EVENTS, CDNUrl, ecmsg, $cookies) {

                return {
                    'request': function (config) {
                        if (!angular.isDefined($rootScope.isLoggedIn)) {
                            return config;
                        }

                        if (!_.includes(config.url, CDNUrl.url)) {
                            if ($rootScope.isLoggedIn() && (_.includes(config.url, "/auth") || _.includes(config.url, "/logout") || _.includes(config.url, "/airlines"))) {

                                var uuid = $cookies.get('authesewa');
                                if (uuid) {
                                    config.headers.uuid = uuid.split(':')[1];
                                }
                            }
                        }
                        else if (_.includes(config.url, "/documents") && _.includes(config.url, ".jpg")) {
                            config.headers.CacheControl = 'no-cache';
                        }
                        $rootScope.disableSubmit = true;
                        return config;
                    },
                    'response': function (response) {
                        $rootScope.disableSubmit = false;
                        if ($rootScope.makePaymentUrls) {
                            var makePaymentUrls =  $rootScope.makePaymentUrls || [];
                            for( var url in $rootScope.makePaymentUrls) {
                                if (response.config.url.indexOf(url) > -1 ) {
                                    $rootScope.$broadcast(AUTH_EVENTS.notificationCount);
                                    break;
                                }
                            }
                        }

                        return response;
                    },
                    'responseError': function (response) {
                        var status = response.status;
                        if (!_.includes(response.config.url, 'reg') && !_.includes(response.config.url, 'authenticate') && !_.includes(response.config.url, 'forgot_password')
                        ) {
                            $rootScope.message = {
                                error: ''
                            };
                            if (status === 401 || status === 403) {
                                $rootScope.$broadcast(AUTH_EVENTS.notAuthorized);
                                if ($rootScope.message.error) {
                                    if (!_.includes(response.config.url, 'payment_menus') && !_.includes(response.config.url, '/products/showcase')) {
                                        ecmsg.error($rootScope.message.error, '');
                                    }
                                }
                            }
                            else if (status === 500) {
                                ecmsg.error('Sorry, something went wrong.', '');
                                return $q.reject(response);
                            }
                            if ($rootScope.message.error !== '' && angular.isDefined($rootScope.message.error)) {
                                if ($rootScope.message.error) {
                                    ecmsg.error($rootScope.message.error, '');
                                    document.body.scrollTop = document.documentElement.scrollTop = 0;
                                } else if (angular.isDefined(response.data.error_message)) {
                                    if (_.includes(response.config.url, 'make_payment') || _.includes(response.config.url, 'payment') || _.includes(response.config.url, 'validate')) {
                                        $rootScope.message.error = response.data.error_message;
                                    } else {
                                        if (!_.includes(response.config.url, 'payment_menus') && !_.includes(response.config.url, '/products/showcase')) {
                                            ecmsg.error(response.data.error_message, '');
                                        }
                                    }
                                }
                            }
                        }

                        return $q.reject(response);
                    }
                };


            }]);
    }]);

angular.module('esewaSharedApp')
    .constant('RegexConstant', {
        landline: /^[1-9][0-9]\d{6}$/,
        landline9: /^[0][1-9]\d{7}$/,
        startZero: /^[0][0]\d{0,100}$/,
        fullname: /^[a-zA-Z]{1,30}[\s][a-zA-Z]{1,30}[ a-zA-Z]{0,30}$/,
        mobileNo: /^[9][6-8][0-9]\d{7}$/,
        email: /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+|[9][8][0-9]{8}$|[9][7][0-9]{8}$|[9][7][5][0-9]{7}$|[9][8][4|6][0-9]{7}$|[9][8][5][0-9]{7}$|[9][8][0][1-2][0-9]{6}$|[9][8][0-1][0-9]{7}$/,
        panNo: /^\d{4,15}$/,
        ward: /^(0?[1-9]|[1-9][0-9])$/,
        tole: /^[a-zA-Z0-9- */]{3,30}$/,
        dob: /^\d{4}\-(0?[1-9]|1[012])\-(0?[1-9]|[12][0-9]|3[01])$/,
        username:/^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+|[9][8][0-9]{8}$|[9][7][0-9]{8}$|[9][7][5][0-9]{7}$|[9][8][4|6][0-9]{7}$|[9][8][5][0-9]{7}$|[9][8][0][1-2][0-9]{6}$|[9][8][0-1][0-9]{7}$/,

    });

angular.module('esewaSharedApp')
    .constant('StateConstant', {
        LOGIN: 'login',
        SIGN_UP: 'authentication.signup',
        HOME_MAIN: 'main.landing',
        FORGOT_PASSWORD: 'authentication.forgotPassword',
        CHANGE_PASSWORD: 'user.changePassword',
        CHANGE_MPIN: 'user.changeMpin',
        INITIAL_REQUIREMENT: 'main.initialRequirement',
        LOGIN_CREDENTIALS: 'user.secondaryUsers',
        NOTIFICATIONS: 'user.notifications',
        ACTIVITIES: 'user.activities',
        DEVICES: 'user.devices',
        SET_FORGOT_PASSWORD: 'activate.setForgottenPassword',
        SET_PASSWORD_EMAIL_USER: 'activate.setPasswordForEmailUser',
        KYC_DETAIL: 'user.detail',
        KYC_ONE: 'user.detail.one',
        KYC_TWO: 'user.detail.two',
        KYC_THREE: 'user.detail.three',
        MAKE_PAYMENT: 'merchant.makePayment',
        MAKE_PAYMENT_SECOND_STEP: 'merchant.makePayment.secondStep',
        MAKE_PAYMENT_CONFIRMATION: 'merchant.makePayment.confirmation',
        FUND_TRANSFER_DETAIL: 'merchant.fundTransfer.detail',
        TRANSACTIONS: 'merchant.transaction',
        STATEMENTS: 'merchant.statements',
        AIRLINES: 'merchant.airlines',
        INTERNET_BANKING: 'fundFrom.internetBanking',
        MOBILE_BANKING: 'fundFrom.mobileBanking',
        BANK_WITHDRAW: 'main.bankWithdraw',
        WESTERN_UNION: 'main.wuPickup',
        WESTERN_UNION_RECEIVE: 'main.wuReceive',
        AIRLINES_HOME: 'merchant.airlines',
        AIRLINES_SEARCH: 'merchant.airlines.search',
        AIRLINES_LIST: 'merchant.airlines.list',
        AIRLINES_PASSANGER: 'merchant.airlines.passenger',
        AIRLINES_CONFIRM: 'merchant.airlines.confirmation',
        AIRLINES_TICKET: 'merchant.airlines.transactionDetail',
        WU: 'static.westernUnion',
        ABOUT_ESEWA: 'static.aboutEsewa',
        FAQS: 'static.faqs',
        MOBILE_APPS: 'static.mobileApps',
        SMS_SYNTAX: 'static.smsSyntax',
        CONTACT_INFORMATION: 'static.contactInformation',
        INTERNET_SERVICE_LIST: 'serviceList',
        KHANEPANI_LIST: 'unifiedkhanepani',
        HOTEL_HOME: 'merchant.hotels',
        HOTEL_LIST: 'merchant.hotels.search',
        HOTEL_DETAILS: 'merchant.hotels.details',
        HOTEL_BOOKING: 'merchant.hotels.confirmation',
        ORGANIZATION_HOME: 'organization.home',
        BUSSEWA_INQUIRY: 'busSewa.inquiry',
        BUSSEWA_PASSENGER_DETAIL: 'busSewa.passenger-detail',
        BUSSEWA_CONFIRMATION: 'busSewa.confirmation',
        REDEEMREWARD_SCHEME: 'redeemReward.scheme',
        REDEEMREWARD_SHOWCASE: 'redeemReward.showcase',
        REDEEMREWARD_STATEMENT: 'redeemReward.statement',
        REDEEMREWARD_HISTORY: 'redeemReward.history'

    });

angular.module('esewaSharedApp')
    .controller('FAQController', ['$scope', '$stateParams', 'CDNUrl', 'CommonService',
        function ($scope, $stateParams, CDNUrl, CommonService) {

            $scope.selectedFaqTitle = $stateParams.faqTopic || 'Have a question ?';
            $scope.faqTopics = {};
            $scope.faqSubTopics = {};
            $scope.subTopicList = [];

            CommonService.getJsonDataFromCdn('faq/faqQuestions').then(
                function (res) {
                    $scope.faqTopics.topics = res.data;
                }
            );

            $scope.getSubtopics = function(topic, index) {
                $scope.selectedTopic = index;
                $scope.selectedSubTopic = null;
                $scope.faqSubTopicName = topic.topic_name;

                CommonService.getJsonDataFromCdn('faq/'+ $scope.selectedFaqTitle.toLowerCase()+'FAQSubTopics').then(
                    function (res) {
                        $scope.faqSubTopics = res.data;
                        $scope.subTopicList = $scope.faqSubTopics[topic.topic_id];

                    }
                );

            };

            $scope.subTopicClicked = function (index) {
                $scope.selectedSubTopic = index;
            };

        }]);

angular.module('esewaSharedApp')
    .controller('ImagePopupController', ['$rootScope', '$scope', 'doc', 'image_src', '$modalInstance',
        function ($rootScope, $scope, doc, image_src, $modalInstance) {
            $scope.doc = doc;
            $scope.image_src = image_src;
            $scope.cancel = function () {
                $modalInstance.dismiss();
            };
            $rootScope.currentModal = $modalInstance;
        }]);

angular.module('esewaSharedApp')
    .controller('InformationController', ['$rootScope', 'InformationService', '$timeout', '$sce', 'AUTH_EVENTS',
        function ($rootScope, InformationService, $timeout, $sce, AUTH_EVENTS) {
            $rootScope.$on(AUTH_EVENTS.information, function () {
                if (!$rootScope.isLoggedIn() || ($rootScope.isLoggedIn() && $rootScope.$storage.profile.isPrimary)) {
                    InformationService.getInformation($rootScope.informationKey).then(
                        function (information) {
                            $rootScope.information = information.plain();
                            $timeout(function () {
                                if ($rootScope.information.information) {
                                    $rootScope.showInformation = true;
                                }
                            }, 100);
                            $rootScope.trustedHtml = $sce.trustAsHtml($rootScope.information.information);
                        }
                    );
                }
            });
        }]);

/**
 * Created by terminator on 4/18/18.
 */
angular.module('esewaSharedApp')
    .controller('SingleDateController', ['$scope',
        function ($scope) {
            var minDate, maxDate;
            $scope.today = new Date();
            var today = new Date();

            var open = function ($event) {
                $scope.today = new Date();
                if (minDate) {
                    $scope.today = minDate;
                }
                if (maxDate) {
                    $scope.maxDateRange = maxDate;
                }
                $event.preventDefault();
                $event.stopPropagation();
            };
            $scope.openDate = function ($event) {
                open($event);
                $scope.DateOpened = true;
            };

            $scope.maxDateRange = today.setMonth(today.getMonth() + 1);

            $scope.setMinDate = function (date) {
                minDate = date;
            };

            $scope.setMaxDate = function (noOfyear) {
                maxDate = noOfyear;
            };
        }]);

angular.module('esewaSharedApp')
    .controller('WebSocketController', ['$scope', 'WebSocketService', '$timeout', '$state', '$rootScope', 'ecmsg', 'AUTH_EVENTS', '$window', '$cookies',
        function ($scope, WebSocketService, $timeout, $state, $rootScope, ecmsg, AUTH_EVENTS, $window, $cookies) {
            $scope.model = {
                transport: 'websocket',
                messages: []
            };
            if (Notification.permission !== 'denied') {
                Notification.requestPermission(function () {
                });
            }
            var socket;
            var atmosphere = WebSocketService;

            //$window.navigator.serviceWorker.register('sw.js');


            function getUrl() {
                if (!$rootScope.domainName || $rootScope.domainName === undefined) {
                    $rootScope.domainName = '';
                }
                return $rootScope.domainName + '/ws/esewa';
            }

            $rootScope.$on(AUTH_EVENTS.socket, function () {
                $scope.messageDto = {
                    message: '',
                    username: '',
                    time: '',
                    type: ''
                };
                var authcky = $cookies.get('authesewa');
                if (!authcky) {
                    return;
                }
                var uuid = authcky.split(':')[1];
                if(angular.isDefined($rootScope.userAuth)){
                    $rootScope.userAuth.uuid = uuid;
                }
                var request = {
                    url: getUrl(),
                    contentType: 'application/json',
                    headers: {token: uuid},
                    logLevel: 'error',
                    transport: 'websocket',
                    enableXDR: true,
                    fallbackTransport: 'long-polling',
                    trackMessageLength: true,
                    reconnectInterval: 10000,
                    enableProtocol: false,
                    timeout: 300000
                };
                request.onMessage = function (response) {
                    var responseText = response.responseBody;
                    if (responseText) {
                        $scope.messageDto = JSON.parse(responseText);
                        if ($scope.messageDto.type === 'SESSION_TIMEOUT' || $scope.messageDto.type === 'LOGOUT') {
                            $scope.processLogout();
                            return;
                        }

                        if ($scope.messageDto.type) {
                            $scope.processBalanceUpdate($scope.messageDto.type);
                            if ($scope.messageDto.message) {
                                $scope.notifyUser($scope.messageDto.message, $scope.messageDto.type, $scope.messageDto.time);
                            }
                        }
                    }
                };

                socket = atmosphere.subscribe(request, {
                    transports: ['xhr-streaming']
                });

                var notification = '';

                $scope.notifyUser = function (message, type, time) {
                    $rootScope.message.success = message;
                    if (time) {
                        ecmsg.info(message, '');
                        return;
                    }
                    var options = {
                        body: message,
                        icon: "common/images/esewa_logo.png",
                        requireInteraction: false
                    };
                    var title = "eSewa";
                    if (!("Notification" in window)) {
                        ecmsg.info(message, '');
                    }

                    else if (Notification.permission === "granted") {
                        notification = new Notification(title, options);
                        $timeout(function () {
                            notification.close();
                        }, 10000);
                    }
                    else if (Notification.permission !== 'denied') {
                        Notification.requestPermission(function (permission) {
                            if (permission === "granted") {
                                $window.navigator.serviceWorker.ready.then(function () {
                                    notification = new Notification(title, options);
                                    $timeout(function () {
                                        notification.close();
                                    }, 10000);
                                });
                            }
                            else {
                                ecmsg.info(message, '');
                            }
                        });
                    }
                    if (notification) {
                        notification.onclick = function () {
                            $window.focus();
                            notification.close();
                            if (type === 'FUND_RECEIVE' || type === 'BANK_LOAD' || type === 'transaction') {
                                $state.go("merchant.statements");
                            } else if (type === 'KYC') {
                                $state.go("user.detail");
                            }
                            else {
                                $state.go("main.landing");
                            }
                        };
                        $timeout(function () {
                            notification.close();
                        }, 10000);
                    }
                    else {
                        ecmsg.info(message, '');
                    }

                };

                $scope.processBalanceUpdate = function (type) {
                    $rootScope.$broadcast(AUTH_EVENTS.getBalanceAndRewards);
                    if (type === 'BATCH_PAYMENT') {
                        $state.reload();
                    }
                };

                $scope.processLogout = function () {
                    $rootScope.$broadcast(AUTH_EVENTS.notAuthorized);
                };
            });
        }
    ]);


angular.module("esewaSharedApp")
    .directive("ecMiniLoadingBar",function () {
        return {
            restrict : "E",
            replace:true,
            scope:{
                showLoadingBar:"="
            },
            template: '<div ng-if="showLoadingBar" class="text-center"><span class="glyphicon glyphicon-refresh">Loading..........</span></div>',
            controller: function($scope){
            }
        };
});

angular.module("esewaSharedApp")
.directive("ecMiniLoadingBarTwo",function () {
    return {
        restrict : "E",
        scope:{
            showLoadingBar:"="
        },
        template: '<div class="loading-design"><img src="common/images/loader.gif" alt="" style="position: fixed; top:50%; left: 50%"></div>',
        controller: function($scope){
        }
    };
});

angular.module('esewaSharedApp')
    .directive('focusOn', ['$timeout', function ($timeout) {
        return {
            restrict: 'A',
            link: function ($scope, $element, $attr) {
                $scope.$watch($attr.focusOn, function (_focusVal) {
                    $timeout(function () {
                        if (_focusVal) {
                            $element[0].focus();
                        } else {
                            $element[0].blur();
                        }
                    });
                });
            }
        };

    }]);


angular.module("esewaSharedApp")
    .directive("loadingBar",function () {
        return {
            restrict : "AE",
            replace:true,
            scope:{
                showLoadingBar:"="
            },
            template: ' <div class="col-md-12" style="padding-left: 0px !important;"> <div class="loading-gif" ng-if="showLoadingBar"> </div> <div class="clearfix"></div> </div>',
            controller: function($scope){
            }
        };
    });

angular.module('esewaSharedApp')
    .factory('FileSaverFactory', [
        function () {
            var saveAs;

            return {
                saveAs: saveAs || (function (view) {
                    if (typeof navigator !== 'undefined' && /MSIE [1-9]\./.test(navigator.userAgent)) {
                        return;
                    }
                    var
                        doc = view.document,
                    // only get URL when necessary in case Blob.js hasn't overridden it yet
                        getURL = function () {
                            return view.URL || view.webkitURL || view;
                        },
                        saveLink = doc.createElementNS('http://www.w3.org/1999/xhtml', 'a'),
                        canUseSaveLink = 'download' in saveLink,
                        click = function (node) {
                            var event = new MouseEvent('click');
                            node.dispatchEvent(event);
                        },
                        isSafari = /Version\/[\d\.]+.*Safari/.test(navigator.userAgent),
                        webkitReqFs = view.webkitRequestFileSystem,
                        reqFs = view.requestFileSystem || webkitReqFs || view.mozRequestFileSystem,
                        throwOutside = function (ex) {
                            (view.setImmediate || view.setTimeout)(function () {
                                throw ex;
                            }, 0);
                        },
                        forceSaveableType = 'application/octet-stream',
                        fsMinSize = 0,
                    // See https://code.google.com/p/chromium/issues/detail?id=375297#c7 and
                    // https://github.com/eligrey/FileSaver.js/commit/485930a#commitcomment-8768047
                    // for the reasoning behind the timeout and revocation flow
                        arbitraryRevokeTimeout = 500, // in ms
                        revoke = function (file) {
                            var revoker = function () {
                                if (typeof file === 'string') { // file is an object URL
                                    getURL().revokeObjectURL(file);
                                } else { // file is a File
                                    file.remove();
                                }
                            };
                            if (view.chrome) {
                                revoker();
                            } else {
                                setTimeout(revoker, arbitraryRevokeTimeout);
                            }
                        },
                        dispatch = function (filesaver, eventTypes, event) {
                            eventTypes = [].concat(eventTypes);
                            var i = eventTypes.length;
                            while (i--) {
                                var listener = filesaver['on' + eventTypes[i]];
                                if (typeof listener === 'function') {
                                    try {
                                        listener.call(filesaver, event || filesaver);
                                    } catch (ex) {
                                        throwOutside(ex);
                                    }
                                }
                            }
                        },
                        autoBom = function (blob) {
                            // prepend BOM for UTF-8 XML and text/!* types (including HTML)
                            if (/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(blob.type)) {
                                return new Blob(['\ufeff', blob], {type: blob.type});
                            }
                            return blob;
                        },
                        FileSaver = function (blob, name, noAutoBom) {
                            if (!noAutoBom) {
                                blob = autoBom(blob);
                            }
                            // First try a.download, then web filesystem, then object URLs
                            var
                                filesaver = this,
                                type = blob.type,
                                blobChanged = false,
                                objectUrl,
                                targetView,
                                dispatchAll = function () {
                                    dispatch(filesaver, 'writestart progress write writeend'.split(' '));
                                },
                            // on any filesys errors revert to saving with object URLs
                                fsError = function () {
                                    if (targetView && isSafari && typeof FileReader !== 'undefined') {
                                        // Safari doesn't allow downloading of blob urls
                                        var reader = new FileReader();
                                        reader.onloadend = function () {
                                            var base64Data = reader.result;
                                            targetView.location.href = 'data:attachment/file' + base64Data.slice(base64Data.search(/[,;]/));
                                            filesaver.readyState = filesaver.DONE;
                                            dispatchAll();
                                        };
                                        reader.readAsDataURL(blob);
                                        filesaver.readyState = filesaver.INIT;
                                        return;
                                    }
                                    // don't create more object URLs than needed
                                    if (blobChanged || !objectUrl) {
                                        objectUrl = getURL().createObjectURL(blob);
                                    }
                                    if (targetView) {
                                        targetView.location.href = objectUrl;
                                    } else {
                                        var newTab = view.open(objectUrl, '_blank');
                                        if (newTab === undefined && isSafari) {
                                            //Apple do not allow window.open, see http://bit.ly/1kZffRI
                                            view.location.href = objectUrl;
                                        }
                                    }
                                    filesaver.readyState = filesaver.DONE;
                                    dispatchAll();
                                    revoke(objectUrl);
                                },
                                abortable = function (func) {
                                    return function () {
                                        if (filesaver.readyState !== filesaver.DONE) {
                                            return func.apply(this, arguments);
                                        }
                                    };
                                },
                                createIfNotFound = {create: true, exclusive: false},
                                slice;
                            filesaver.readyState = filesaver.INIT;
                            if (!name) {
                                name = 'download';
                            }
                            if (canUseSaveLink) {
                                objectUrl = getURL().createObjectURL(blob);
                                setTimeout(function () {
                                    saveLink.href = objectUrl;
                                    saveLink.download = name;
                                    click(saveLink);
                                    dispatchAll();
                                    revoke(objectUrl);
                                    filesaver.readyState = filesaver.DONE;
                                });
                                return;
                            }
                            // Object and web filesystem URLs have a problem saving in Google Chrome when
                            // viewed in a tab, so I force save with application/octet-stream
                            // http://code.google.com/p/chromium/issues/detail?id=91158
                            // Update: Google errantly closed 91158, I submitted it again:
                            // https://code.google.com/p/chromium/issues/detail?id=389642
                            if (view.chrome && type && type !== forceSaveableType) {
                                slice = blob.slice || blob.webkitSlice;
                                blob = slice.call(blob, 0, blob.size, forceSaveableType);
                                blobChanged = true;
                            }
                            // Since I can't be sure that the guessed media type will trigger a download
                            // in WebKit, I append .download to the filename.
                            // https://bugs.webkit.org/show_bug.cgi?id=65440
                            if (webkitReqFs && name !== 'download') {
                                name += '.download';
                            }
                            if (type === forceSaveableType || webkitReqFs) {
                                targetView = view;
                            }
                            if (!reqFs) {
                                fsError();
                                return;
                            }
                            fsMinSize += blob.size;
                            reqFs(view.TEMPORARY, fsMinSize, abortable(function (fs) {
                                fs.root.getDirectory('saved', createIfNotFound, abortable(function (dir) {
                                    var save = function () {
                                        dir.getFile(name, createIfNotFound, abortable(function (file) {
                                            file.createWriter(abortable(function (writer) {
                                                writer.onwriteend = function (event) {
                                                    targetView.location.href = file.toURL();
                                                    filesaver.readyState = filesaver.DONE;
                                                    dispatch(filesaver, 'writeend', event);
                                                    revoke(file);
                                                };
                                                writer.onerror = function () {
                                                    var error = writer.error;
                                                    if (error.code !== error.ABORT_ERR) {
                                                        fsError();
                                                    }
                                                };
                                                'writestart progress write abort'.split(' ').forEach(function (event) {
                                                    writer['on' + event] = filesaver['on' + event];
                                                });
                                                writer.write(blob);
                                                filesaver.abort = function () {
                                                    writer.abort();
                                                    filesaver.readyState = filesaver.DONE;
                                                };
                                                filesaver.readyState = filesaver.WRITING;
                                            }), fsError);
                                        }), fsError);
                                    };
                                    dir.getFile(name, {create: false}, abortable(function (file) {
                                        // delete file if it already exists
                                        file.remove();
                                        save();
                                    }), abortable(function (ex) {
                                        if (ex.code === ex.NOT_FOUND_ERR) {
                                            save();
                                        } else {
                                            fsError();
                                        }
                                    }));
                                }), fsError);
                            }), fsError);
                        },
                        FSProto = FileSaver.prototype,
                        saveAs = function (blob, name, noAutoBom) {
                            return new FileSaver(blob, name, noAutoBom);
                        };
                    // IE 10+ (native saveAs)
                    if (typeof navigator !== 'undefined' && navigator.msSaveOrOpenBlob) {
                        return function (blob, name, noAutoBom) {
                            if (!noAutoBom) {
                                blob = autoBom(blob);
                            }
                            return navigator.msSaveOrOpenBlob(blob, name || 'download');
                        };
                    }

                    FSProto.abort = function () {
                        var filesaver = this;
                        filesaver.readyState = filesaver.DONE;
                        dispatch(filesaver, 'abort');
                    };
                    FSProto.readyState = FSProto.INIT = 0;
                    FSProto.WRITING = 1;
                    FSProto.DONE = 2;

                    FSProto.error =
                        FSProto.onwritestart =
                            FSProto.onprogress =
                                FSProto.onwrite =
                                    FSProto.onabort =
                                        FSProto.onerror =
                                            FSProto.onwriteend =
                                                null;

                    return saveAs;
                }(typeof self !== 'undefined' && self || typeof window !== 'undefined' && window || this.content))
            };
        }]);

angular.module('esewaSharedApp')
    .filter('amount', ['$filter', function ($filter) {
        return function (input) {
            if (input % 1 !== 0) {
                return $filter('number')(_.round(input, 2), 2);
            } else {
                return $filter('number')(input, 2);
            }
        };
    }]);

/*TO DO*/
/*Display Amound Filter*/

angular.module('esewaSharedApp')
    .filter('cdn', ['CDNUrl', function (CDNUrl) {
        return function (url) {
            return CDNUrl.url+"/" + url;
        };
    }]);

angular.module('esewaSharedApp')
    .filter('capitalize', function () {
        return function (input) {
            input = input.split('_').join(' ');
            return (!!input) ? input.charAt(0).toUpperCase() + input.substr(1).toLowerCase() : '';
        };
    });

angular.module('esewaSharedApp')
    .filter('DateFormat', function ($filter) {
        var angularDateFilter = $filter('date');
        return function (input) {
            return angularDateFilter(input, 'd MMM y, h:mm a');
        };
    })
    .filter('DateFormatDay', function ($filter) {
        var angularDateFilter = $filter('date');

        return function (input) {
            var dateOut = new Date(input);
            var newDate = new Date();
            newDate.setFullYear(dateOut.getFullYear());
            newDate.setMonth(dateOut.getMonth());
            newDate.setDate(dateOut.getDate());
            return angularDateFilter(newDate, 'd MMM y, h:mm a');
        };
    }).filter('DateFormatTime', function ($filter) {
    var angularDateFilter = $filter('date');
    return function (input) {
        return angularDateFilter(input);
    };
})
    .filter('channel', function () {
        return function (input) {
            switch (input) {
                case 'WEB':
                    return 'Web';
                case 'GPRS':
                    return 'GPRS';
                default:
                    return input;
            }
        };
    });

angular.module('esewaSharedApp')
    .filter('DateFormatOnlyDate', function ($filter) {
        var angularDateFilter = $filter('date');

        return function (input) {
            var dateOut = new Date(input);
            var newDate = new Date();
            newDate.setFullYear(dateOut.getFullYear());
            newDate.setMonth(dateOut.getMonth());
            newDate.setDate(dateOut.getDate());
            return angularDateFilter(newDate, 'd MMM y');
        };
    }).filter('DateFormatOnlyTime', function ($filter) {
    var angularDateFilter = $filter('date');

    return function (input) {
        var dateOut = new Date(input);
        var newDate = new Date();
        newDate.setFullYear(dateOut.getFullYear());
        newDate.setMonth(dateOut.getMonth());
        newDate.setDate(dateOut.getDate());
        return angularDateFilter(dateOut, 'h:mm a');
    };
   })
    .filter('DateFormatFilter', function ($filter) {
        var angularDateFilter = $filter('date');

        return function (input) {
            var dateOut = new Date(input);
            var newDate = new Date();
            newDate.setFullYear(dateOut.getFullYear());
            newDate.setMonth(dateOut.getMonth());
            newDate.setDate(dateOut.getDate());
            return angularDateFilter(dateOut, 'h:mm a');
        };
    });

      


angular.module('esewaSharedApp')
    .filter('gender', function () {
        return function (input) {
            switch (input) {
                case 'M':
                    return "MALE";
                case 'F':
                    return "FEMALE";
                case '0':
                    return "N/A";
                default:
                    return input;

            }
        };
    });

angular.module('esewaSharedApp')
    .filter('html', ['$sce', function ($sce) {
        return function (text) {
            return $sce.trustAsHtml(text);
        };
    }]);

/**
 * Created by prakash on 6/12/17.
 */

angular.module('esewaSharedApp')
    .filter('LogoInsert', ['$sce', function ($sce) {
        return function (sentance) {
            var converted;
            converted = sentance.replace("Linux", "<img src='/common/images/icons/linux.png' title='Linux' />");
            converted = converted.replace("Chrome", "<img src='/common/images/icons/chrome.png' title='Google Chrome'/>");
            converted = converted.replace(",", " ");
            converted = converted.replace(",", " ");
            converted = converted.replace("Mozilla", "<img src='/common/images/icons/firefox.png' title='Mozilla Firefox' />");
            converted = converted.replace("Opera", "<img src='/common/images/icons/opera.png' title='Opera' />");
            converted = converted.replace("Windows", "<img src='/common/images/icons/microsoft_windows.png' title='Windows' />");
            return $sce.trustAsHtml(converted);
        };
    }])
    .filter('UrlCode', function () {
        return function (s) {
            var prefix = 'http://';
            var secprefix = 'https://';
            if (s) {
                if (s.substr(0, prefix.length) !== prefix && s.substr(0, secprefix.length) !== secprefix) {
                    s = prefix + s;
                }
                else if (s === null) {
                    return s;
                }
            }
            return s;
        };

    });

angular.module('esewaSharedApp')
  .filter('nepaliDigit', function () {
    return function (data) {
      if( typeof data === "undefined") {
        return;
      }
      var englishNumbers = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];
      var nepaliNumbers = ['१', '२', '३', '४', '५', '६', '७', '८', '९', '०'];

      var numberToNepali = '' || data.toString();

      for (var i = 0; i < englishNumbers.length; i++) {
        numberToNepali = numberToNepali.replace(new RegExp(englishNumbers[i], 'g'), nepaliNumbers[i]);
      }
      return numberToNepali;
    };
  });

angular.module('esewaSharedApp')
  .filter('randomSrc', function () {
    return function (input) {
      if (input) {
        return input + '?r=' + Math.round(Math.random() * 999999);
      }
    };
  });

angular.module('esewaSharedApp')
    .filter('reverse_camel_case', function () {
        return function (text) {
                var reversedCase;
                reversedCase = text.replace(/([A-Z])/g, " $1");
                reversedCase = reversedCase.split('_').join(' ');
                reversedCase = reversedCase.charAt(0).toUpperCase() + reversedCase.slice(1);
            reversedCase = titleCase(reversedCase);
                reversedCase = reversedCase.replace('Esewa', "eSewa");
                reversedCase = reversedCase.replace('esewa', "eSewa");
                return reversedCase;
        };
        function titleCase(str) {
            var splitStr = str.toLowerCase().split(' ');
            for (var i = 0; i < splitStr.length; i++) {
                // You do not need to check if i is larger than splitStr length, as your for does that for you
                // Assign it back to the array
                splitStr[i] = splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1);
            }
            // Directly return the joined string
            return splitStr.join(' ');
        }
    });

angular.module('esewaSharedApp').
    filter('timeago', function () {
        return function (input, p_allowFuture) {
            var substitute = function (stringOrFunction, number, strings) {
                var string = $.isFunction(stringOrFunction) ? stringOrFunction(number, dateDifference) : stringOrFunction;
                var value = (strings.numbers && strings.numbers[number]) || number;
                return string.replace(/%d/i, value);
            };
            var nowTime = (new Date()).getTime();
            if(input) {
                input = input.replace(/-/g, '/');
            }
            var date = (new Date(input)).getTime();
            //refreshMillis= 6e4, //A minute
            var allowFuture = p_allowFuture || false,
                strings = {
                    prefixAgo: null,
                    prefixFromNow: null,
                    suffixAgo: "ago",
                    suffixFromNow: "from now",
                    seconds: "less than a minute",
                    minute: "about a minute",
                    minutes: "%d minutes",
                    hour: "about an hour",
                    hours: "about %d hours",
                    day: "a day",
                    days: "%d days",
                    month: "about a month",
                    months: "%d months",
                    year: "about a year",
                    years: "%d years"
                },
                dateDifference = nowTime - date,
                words,
                seconds = Math.abs(dateDifference) / 1000,
                minutes = seconds / 60,
                hours = minutes / 60,
                days = hours / 24,
                years = days / 365,
                separator = strings.wordSeparator === undefined ? " " : strings.wordSeparator,

            // var strings = this.settings.strings;
                prefix = strings.prefixAgo,
                suffix = strings.suffixAgo;

            if (allowFuture) {
                if (dateDifference < 0) {
                    prefix = strings.prefixFromNow;
                    suffix = strings.suffixFromNow;
                }
            }

            words = seconds < 45 && substitute(strings.seconds, Math.round(seconds), strings) ||
            seconds < 90 && substitute(strings.minute, 1, strings) ||
            minutes < 45 && substitute(strings.minutes, Math.round(minutes), strings) ||
            minutes < 90 && substitute(strings.hour, 1, strings) ||
            hours < 24 && substitute(strings.hours, Math.round(hours), strings) ||
            hours < 42 && substitute(strings.day, 1, strings) ||
            days < 30 && substitute(strings.days, Math.round(days), strings) ||
            days < 45 && substitute(strings.month, 1, strings) ||
            days < 365 && substitute(strings.months, Math.round(days / 30), strings) ||
            years < 1.5 && substitute(strings.year, 1, strings) ||
            substitute(strings.years, Math.round(years), strings);

            return $.trim([prefix, words, suffix].join(separator));
            // conditional based on optional argument
            // if (somethingElse) {
            //     out = out.toUpperCase();
            // }
            // return out;
        };
    });

angular.module('esewaSharedApp')
    .filter('to_trusted_html', ['$sce', function ($sce) {
        return function (text) {
            return $sce.trustAsHtml(text);
        };
    }]);

angular.module('esewaSharedApp').filter('uiSelectFilter',[ function() {
    return function(items, props) {
        var out = [];

        if (angular.isArray(items)) {
            var keys = Object.keys(props);

            items.forEach(function(item) {
                var itemMatches = false;

                for (var i = 0; i < keys.length; i++) {
                    var prop = keys[i];

                    var text = props[prop].toLowerCase();
                    if(item[prop]) {
                        if (item[prop].toString().toLowerCase().indexOf(text) !== -1) {
                            itemMatches = true;
                            break;
                        }
                    }

                }

                if (itemMatches) {
                    out.push(item);
                }
            });
        } else {
            // Let the output be the input untouched
            out = items;
        }

        return out;
    };
}]);
angular.module('esewaSharedApp')
    .service('InformationService', ['Restangular', function (Restangular) {
        var Bank = Restangular.one('banks');
        this.getInformation = function (key) {
            return Restangular.one('info_message').one(key + '').get();
        };
        this.getInternetBankingDetails = function () {
            return Bank.one(true).get();
        };
        this.getMobileBankingDetails = function () {
            return Bank.one(false).get();
        };
    }]);

angular.module('esewaSharedApp')
    .service('PaginationService', function () {

        this.getDefaultPagination = function () {
            return {
                page: 0,
                size: 15
            };
        };

        this.getPagination = function (page, pageSize) {
            return {
                page: page,
                size: pageSize
            };
        };
    });

angular.module('esewaSharedApp')
    .service('ValidationService', ['RegexConstant', function (RegexConstant) {

        this.checkNameValid = function (fullName, optional) {
            if (fullName) {
                if (RegexConstant.fullname.test(fullName)) {
                    return this.separateNames(fullName);
                }
            }
            else if (optional) {
                return true;
            }
            return false;

        };

        this.checkPANValid = function (panNo) {
            if (panNo) {
                if (RegexConstant.startZero.test(panNo)) {
                    return false;
                }
                return RegexConstant.panNo.test(panNo);
            }
            return true;

        };

        this.checkLandlineValid = function (landline) {
            if (landline) {
                if (RegexConstant.startZero.test(landline)) {
                    return false;
                }
                if (landline.length === 8) {
                    return RegexConstant.landline.test(landline);
                }
                else {
                    return RegexConstant.landline9.test(landline);
                }
            }
            return true;
        };
        this.checkToleValid = function (tole) {
            if (tole) {
                return RegexConstant.tole.test(tole);
            }
            return false;
        };
        this.checkWardValid = function (ward) {
            if (ward) {
                if (RegexConstant.startZero.test(ward)) {
                    return false;
                }
                return RegexConstant.ward.test(ward);
            }
            return false;
        };
        this.checkDOBValid = function (dob) {
            if (dob) {
                return RegexConstant.dob.test(dob);
            }
            return false;
        };
        this.checkMobileValid = function (mobileNo) {
            if (mobileNo) {
                return RegexConstant.mobileNo.test(mobileNo);
            }
            return false;
        };
        this.checkPhoneValid = function (mobileNo) {
            if (mobileNo) {
                return (RegexConstant.mobileNo.test(mobileNo) || RegexConstant.landline.test(mobileNo) || RegexConstant.landline9.test(mobileNo)) ;
            }
            return false;
        };
        this.checkEmailValid = function (email) {
            if (email) {
                return RegexConstant.email.test(email);
            }
            return false;
        };

        this.checkUsernameValid = function(username){
            if (username) {
                return RegexConstant.username.test(username);
            }
            return false;
        };

        this.separateNames = function (fullName) {
            fullName = fullName.replace(/ +/g, " ");
            fullName = fullName.replace(/ /g, "|");
            var firstName = fullName.split('|')[0];
            var middleName = '';
            var lastName = '';
            if (fullName.split('|').length > 2) {
                middleName = fullName.split('|')[1].replace(/ +/g, "");
                lastName = fullName.split('|')[2].replace(/ +/g, "");
            }
            else if (fullName.split('|').length > 1) {
                lastName = fullName.split('|')[1].replace(/ +/g, "");
            }
            else {
                return false;
            }

            return [firstName, middleName, lastName];

        };
        this.showRejectedField = function (parentModal, fieldName, errorMessage) {
            var element = '';
            if (fieldName === 'first_name' || fieldName === 'last_name' || fieldName === 'middle_name') {
                fieldName = 'full_name';
            }
            else if (fieldName === 'permanent_address_vdc') {
                element = angular.element(angular.element('[ng-model="vdc"]')[0]);
            }
            else if (fieldName === 'permanent_address_ward') {
                element = angular.element(angular.element('[ng-model="ecWardNo"]')[0]);
            }
            else if (fieldName === 'permanent_address_tole') {
                element = angular.element(angular.element('[ng-model="ecTole"]')[0]);
            }
            else if (fieldName === 'current_address_vdc') {
                element = angular.element(angular.element('[ng-model="vdc"]')[1]);
            }
            else if (fieldName === 'current_address_ward') {
                element = angular.element(angular.element('[ng-model="ecWardNo"]')[1]);
            }
            else if (fieldName === 'current_address_tole') {
                element = angular.element(angular.element('[ng-model="ecTole"]')[1]);
            }
            if (element) {
                element.find('.error').html('');
                element.addClass('errorField');
                element.parent().append('<div class="error">' + errorMessage + '</div>');
            }
            if (fieldName === 'date_of_birth_bs' || fieldName === 'date_of_birth_ad') {
                angular.element('[ng-model="ecType"]').addClass('errorField');
                angular.element('[ng-model="year"]').addClass('errorField');
                angular.element('[ng-model="month"]').addClass('errorField');
                angular.element('[ng-model="day"]').addClass('errorField');
                angular.element('[ng-model="ecType"]').parent().append('<div class="error" style="padding-left: 200px">' + errorMessage + '</div>');
            }
            else {
                element = angular.element('[ng-model="' + parentModal + '.' + fieldName + '"]');
                element.addClass('errorField');
                element.parent().append('<div class="error">' + errorMessage + '</div>');
            }

        };
    }
    ]);

angular.module('esewaSharedApp')
    .service('WebSocketService', ['$rootScope', function ($rootScope) {
        var responseParameterDelegateFunctions = ['onOpen', 'onClientTimeout', 'onReopen', 'onMessage', 'onClose', 'onError'];
        var delegateFunctions = responseParameterDelegateFunctions;
        delegateFunctions.push('onTransportFailure');
        delegateFunctions.push('onReconnect');

        return {
            subscribe: function (r) {
                var result = {};
                angular.forEach(r, function (value, property) {
                    if (typeof value === 'function' && delegateFunctions.indexOf(property) >= 0) {
                        if (responseParameterDelegateFunctions.indexOf(property) >= 0)
                            result[property] = function (response) {
                                $rootScope.$apply(function () {
                                    r[property](response);
                                });
                            };
                        else if (property === 'onTransportFailure')
                            result.onTransportFailure = function (errorMsg, request) {
                                $rootScope.$apply(function () {
                                    r.onTransportFailure(errorMsg, request);
                                });
                            };
                        else if (property === 'onReconnect')
                            result.onReconnect = function (request, response) {
                                $rootScope.$apply(function () {
                                    r.onReconnect(request, response);
                                });
                            };
                    } else
                        result[property] = r[property];
                });

                return atmosphere.subscribe(result);
            }
        };
    }]);

angular.module('esewaSharedApp')
    .constant('AUTH_EVENTS', {
        loginSuccess: 'auth-login-success',
        loginFailed: 'auth-login-failed',
        logoutSuccess: 'auth-is_logout-success',
        sessionTimeout: 'auth-session-timeout',
        notAuthenticated: 'auth-not-authenticated',
        notAuthorized: 'auth-not-authorized',
        changePassword: 'CHANGE_PASSWORD',
        personalDetail: 'PERSONAL_DETAIL',
        generalDetail: 'GENERAL_DETAIL',
        identityDetail: 'IDENTITY_DETAIL',
        notifications: 'NOTIFICATIONS',
        initialRequirement: 'INITIAL_REQUIREMENT',
        welcomeForm: 'WELCOME_FORM',
        getBalanceAndRewards: 'get-balance-and-rewards',
        getShowcases: 'get-show-case',
        getFeaturedShowcases: 'get-featured-show-case',
        getMenus: 'get-menus',
        getProductCommission: 'get-product-commission',
        information: 'information',
        socket: 'socket',
        devGruntPort:8000,
        devServerPort: 8100,
        fcmNotificationCount: 'FCM_NOTIFICATION_COUNT'
    });

angular.module('esewaSharedApp')

.constant('CDNUrl', {url:'https://cdn.esewa.com.np/ui',defaultAccountUrl:'https://cdn.esewa.com.np/ui/static/images/account_picture.png',welcomePage:'https://cdn.esewa.com.np/ui/html/WELCOME_ESEWA.html'})

;
angular.module('esewaSharedApp')
    .constant('INFORMATION', {
        primaryRegistration: 'PRIMARY_REGISTRATION_INFO',
        primaryRegistrationToken: 'PRIMARY_REGISTRATION_TOKEN_INFO',
        primaryRegistrationPasswordValidation: 'PRIMARY_REGISTRATION_CREATE_PASSWORD_INFO',
        secondaryRegistration: 'SECONDARY_REGISTRATION_INFO',
        secondaryRegistrationToken: 'SECONDARY_REGISTRATION_TOKEN_INFO',
        secondaryRegistrationPasswordValidation: 'SECONDARY_REGISTRATION_CREATE_PASSWORD_INFO',
        kycPersonal: 'KYC_PERSONAL_INFO',
        kycGeneral: 'KYC_GENERAL_INFO',
        kycIdentity: 'KYC_IDENTITY_INFO',
        userChangePassword: 'USER_CHANGE_PASSWORD_INFO',
        userChangeMPIN: 'USER_CHANGE_PIN_INFO',
        userPasswordExpire: 'USER_PASSWORD_EXPIRE_INFO',
        userStatement: 'USER_STATEMENT_INFO',
        forgotPassword: 'FORGOT_PASSWORD',
        forgotPasswordValidation: 'FORGOT_PASSWORD_VALIDATION',
        notification: 'NOTIFICATION'
    });

angular.module('esewaSharedApp')
    .constant('LabelConstant', {
        fullName: 'Name',
        permanentAddress: 'Permanent Address',
        currentAddress: 'Current Address',
        fatherName: 'Father\'s or Husband\'s Name',
        motherName: 'Mother\'s Name',
        spouseName: 'Spouse\'s Name',
        grandFatherName: 'Grand Father\'s or Father-in-law\'s Name',
        panNo: 'PAN No',
        landlineNo: 'Landline No',
        occupation: 'Occupation',
        dateOfBirth: 'Date of Birth',
        gender: 'Gender',
        setSameAsPermanent:'Same as permanent'
    });

angular.module('esewaSharedApp')
    .constant('MessageConstant', {
        dataFetchError:'Error while fetching data. Please, try again later.',
        serviceNotAvailable :'Service is currently unavailable. please, try again later.'
    });

angular.module('esewaSharedApp')
    .constant('ResponseConstant', {
        userActivitiesActivities: 'userActivities.activities',
        activityTime: 'activity_time',
        activityDate: 'activity_date',
        showcases: 'showcases.offers',
        featuredShowcases: 'featuredShowcases.featuredOffers'
    });
})(window.jQuery, window, window.angular);